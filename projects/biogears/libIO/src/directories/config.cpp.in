#include <biogears/io/directories/config.h>

#include <cstring>
#include <string>
#include <fstream>

#include <biogears/filesystem/path.h>

@RESOURCE_INCLUDE_LIST@

namespace biogears {
namespace io {

  char const * config_file_list[] = {
@RESOURCE_FILE_LIST@
  };

  constexpr size_t count_of_config_files = @RESOURCE_FILE_COUNT@;

  bool generate_config_directory(const char* root)
  {
   biogears::filesystem::path working_dir { root };
   std::ofstream output;

   bool result = true;

   auto write_file = [&](char const* path, char const* content, size_t content_size) {
      biogears::filesystem::create_directories((working_dir / path).parent_path());
      output.open((working_dir / path).string(), std::fstream::out);
      if (!output.is_open()) {
        return false;
      }
      output.write(content, content_size);
      return true;
   };

@GENERATE_DIRECTORY_BODY@

   return true;

  }
  //-----------------------------------------------------------------------------
  bool does_embedded_config_file_exist(const char* path)
  {
    return @DOES_EMBEDDED_FILE_EXIST_BODY@false;

  }
  //-----------------------------------------------------------------------------
  size_t find_config_file(const char* file, const char* root, char* buffer, size_t buffer_length)
  { 
    size_t content_size = 0;
    biogears::filesystem::path test_location { file };
    if (test_location.exists() && test_location.is_file()) {
      std::ifstream config_file { test_location.str(), std::ios::in };
      if (config_file.is_open()) {
        config_file.seekg(0, config_file.end);
        content_size = config_file.tellg();
        config_file.seekg(0, config_file.beg);
      }
      if (content_size < buffer_length) {
        config_file.read(buffer, content_size);
        return content_size;
      }
    }
    if (root != nullptr) {
      test_location = root;
      test_location /= file;
      if (test_location.exists() && test_location.is_file()) {
        std::ifstream config_file { test_location.str(), std::ios::in };
        if (config_file.is_open()) {
          config_file.seekg(0, config_file.end);
          content_size = config_file.tellg();
          config_file.seekg(0, config_file.beg);
          if (content_size < buffer_length) {
            config_file.read(buffer, content_size);
            return content_size;
          }
        }
      }
    }

    auto embeded_content = get_embedded_config_file(file);

    return content_size;
  }
  //-----------------------------------------------------------------------------
  char const* get_config_file_sha1(const char* path)
  {
     char const* file_sha1 = "";
     
@GET_FILE_SHA1_BODY@
     return file_sha1;
  }
  //-----------------------------------------------------------------------------
  char const* const* list_config_files()
  {
    return config_file_list;
  }
  //-----------------------------------------------------------------------------
  size_t config_file_count()
  {
    return count_of_config_files;
  }
  //-----------------------------------------------------------------------------
  char const* get_embedded_config_file(const char* path)
  {
    char const * embedded_content = "";

@GET_EMBEDED_CONTENTS_BODY@

    return embedded_content;
  }
  //-----------------------------------------------------------------------------

  //biogears::filesystem::path overloads
  bool generate_config_directory(biogears::filesystem::path path)
  {
   biogears::filesystem::path working_dir  = path;
   std::ofstream output;

   bool result = true;

   auto write_file = [&](char const* path, char const* content, size_t content_size) {
      biogears::filesystem::create_directories((working_dir / path).parent_path());
      output.open((working_dir / path).string(), std::fstream::out);
      if (!output.is_open()) {
        return false;
      }
      output.write(content, content_size);
      return true;
   };

@GENERATE_DIRECTORY_BODY@

   return true;
  }
  //-----------------------------------------------------------------------------
  bool does_embedded_config_file_exist(biogears::filesystem::path path)
  {
     return @DOES_EMBEDDED_FILE_EXIST_PATH_BODY@false;
  }
  //-----------------------------------------------------------------------------
  char const* get_config_file_sha1(biogears::filesystem::path path)
  {
     char const* file_sha1 = "";
     
@GET_FILE_SHA1_PATH_BODY@

     return file_sha1;
  }
  //-----------------------------------------------------------------------------
  char const* get_embedded_config_file(biogears::filesystem::path path)
  {
    char const * embedded_content = "";

@GET_EMBEDED_CONTENTS_PATH_BODY@

    return embedded_content;
  }
  //-----------------------------------------------------------------------------
  size_t  get_embedded_config_file_size( const char* path) 
  {
    size_t size_of_embedded_content = 0;

@GET_EMBEDED_CONTENTS_SIZE_PATH_BODY@

    return size_of_embedded_content ;
  }
  //-----------------------------------------------------------------------------
}
}
